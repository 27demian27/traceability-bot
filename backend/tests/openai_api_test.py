from openai import OpenAI

import os
from dotenv import load_dotenv, dotenv_values 

load_dotenv() 

client = OpenAI(
  api_key=os.getenv("LLM_API_KEY")
)

completion = client.chat.completions.create(
  model=os.getenv("LLM_API_MODEL"),
  store=True,
  messages=[
    {"role": "user", "content": """
    
    Respond in natural language.
    The user may ask requirements to code questions.
    The user may ask requirements to testing questions.
    The user may ask requirements to architectual design questions.

    Keep your answers short and concise unless asked otherwise.

    The user has the ability to upload requirements and architectual design documents, 
    as well as code files.

    If you havent received this yet from the user please ask them to do so.

    When receiving a request to locate functionality/test coverage, be concise and mention file names. Dont explain the logic, or tests. 

    When the user asks a question your main goal is to trace what and where.

    Clearly space out different requirements using markdown.

    ### User message [MAKE SURE TO JUST ANSWER THIS AND NOT PROVIDE ADDITIONAL INFO]:
    Is req US-M1 sufficiently tested?

    ### User project related info:

    Requirements:
    [{'id': 'US0-S0', 'description': 'This is an example requirement [DONT INCLUDE THIS]', 'type': 'Functional', 'priority': 'Must'}, {'id': 'US1-M1', 'description': "There is a login and authorization system for the role of 'report manager’ whenever a user logs into the web service.", 'type': 'Functional', 'priority': 'Must'}, {'id': 'US2-M1', 'description': 'The API must be able to retrieve the questionnaire from the database.', 'type': 'Functional', 'priority': 'Must'}, {'id': 'US2-M2', 'description': 'The questionnaire should be present in the system.', 'type': 'Functional', 'priority': 'Must'}, {'id': 'US7-M1', 'description': 'The questionnaire has a question asking for the email address of the reporter.', 'type': 'Functional', 'priority': 'Must'}, {'id': 'US7-S2', 'description': 'The questionnaire has a question asking to allow email notification when the status of the report is marked as ‘resolved’.', 'type': 'Functional', 'priority': 'Must'}, {'id': 'US7-S3', 'description': 'The system should send an email notification to the reporter when a ‘report manager’ sets the status of the report as resolved.', 'type': 'Functional', 'priority': 'Must'}, {'id': 'US8-S1', 'description': 'A ‘report manager’ should have a dashboard with statistics on how many malfunctions have been fixed over a set timeframe.', 'type': 'Functional', 'priority': 'Must'}, {'id': 'US11-M1', 'description': 'The backend must be developed with the PHP framework Laravel.', 'type': 'Non-functional', 'priority': 'Must'}, {'id': 'US11-M2', 'description': 'The frontend must be developed with the JS framework React.', 'type': 'Non-functional', 'priority': 'Must'}, {'id': 'US11-M3', 'description': 'The API must adhere to the RESTful principles.', 'type': 'Non-functional', 'priority': 'Must'}, {'id': 'US11-S4', 'description': 'The web service should use a MySQL database docker image.', 'type': 'Non-functional', 'priority': 'Must', 'category': 'Performance'}, {'id': 'US11-S5', 'description': 'The entire web service must be able to be deployed with Docker.', 'type': 'Non-functional', 'priority': 'Must'}, {'id': 'US12-M1', 'description': 'The system’s root directory has a README.md file with information and instructions to deploy and manage the system.', 'type': 'Non-functional', 'priority': 'Must'}, {'id': 'US13-M1', 'description': 'The system has overall a high code quality (judged by the client). Some examples of this are minimal code duplication, high test coverage, and code metrics.', 'type': 'Non-functional', 'priority': 'Must'}, {'id': 'US13-M2', 'description': 'The system directory, package, and module structure is easy to follow.', 'type': 'Non-functional', 'priority': 'Must'}]

    Extracted Functions:
    [{'file': 'AnswersTest.php', 'function': 'test_create_answer_with_valid_playload', 'type': 'test', 'language': 'php'}, {'file': 'AnswersTest.php', 'function': 'test_create_answer_with_invalid_payload', 'type': 'test', 'language': 'php'}, {'file': 'AuthenticationTest.php', 'function': 'test_users_can_authenticate_using_the_login_endpoint', 'type': 'test', 'language': 'php'}, {'file': 'AuthenticationTest.php', 'function': 'test_users_can_not_authenticate_with_invalid_password', 'type': 'test', 'language': 'php'}, {'file': 'AuthenticationTest.php', 'function': 'test_users_can_logout', 'type': 'test', 'language': 'php'}, {'file': 'AuthenticationTest.php', 'function': 'test_users_can_get_user_data', 'type': 'test', 'language': 'php'}, {'file': 'ReportsTest.php', 'function': 'test_get_report_invalid_id', 'type': 'test', 'language': 'php'}, {'file': 'ReportsTest.php', 'function': 'test_get_report', 'type': 'test', 'language': 'php'}, {'file': 'ReportsTest.php', 'function': 'test_get_reports_on_empty_database', 'type': 'test', 'language': 'php'}, {'file': 'ReportsTest.php', 'function': 'test_get_reports_on_populated_database', 'type': 'test', 'language': 'php'}, {'file': 'ReportsTest.php', 'function': 'test_create_report_invalid_payload', 'type': 'test', 'language': 'php'}, {'file': 'ReportsTest.php', 'function': 'test_create_report_invalid_email', 'type': 'test', 'language': 'php'}, {'file': 'ReportsTest.php', 'function': 'test_create_report_default_status_and_priority', 'type': 'test', 'language': 'php'}, {'file': 'ReportsTest.php', 'function': 'test_create_report_base', 'type': 'test', 'language': 'php'}, {'file': 'ReportsTest.php', 'function': 'test_create_report_with_responses', 'type': 'test', 'language': 'php'}, {'file': 'ReportsTest.php', 'function': 'test_get_report_with_responses', 'type': 'test', 'language': 'php'}, {'file': 'ReportsTest.php', 'function': 'test_patch_report_invalid_request', 'type': 'test', 'language': 'php'}, {'file': 'ReportsTest.php', 'function': 'test_patch_report_valid_request', 'type': 'test', 'language': 'php'}, {'file': 'ReportsTest.php', 'function': 'test_get_reports_with_status_filter', 'type': 'test', 'language': 'php'}, {'file': 'ReportsTest.php', 'function': 'test_get_reports_with_priority_filter', 'type': 'test', 'language': 'php'}, {'file': 'ReportsTest.php', 'function': 'test_get_reports_with_insufficient_authorization', 'type': 'test', 'language': 'php'}, {'file': 'ReportsTest.php', 'function': 'test_get_report_with_insufficient_authorization', 'type': 'test', 'language': 'php'}, {'file': 'ReportsTest.php', 'function': 'test_patch_report_with_insufficient_authorization', 'type': 'test', 'language': 'php'}, {'file': 'ReportsTest.php', 'function': 'test_patch_report_invalid_user_id_request', 'type': 'test', 'language': 'php'}, {'file': 'QuestionsTest.php', 'function': 'test_create_question_with_invalid_request', 'type': 'test', 'language': 'php'}, {'file': 'QuestionsTest.php', 'function': 'test_create_mc_question', 'type': 'test', 'language': 'php'}, {'file': 'QuestionsTest.php', 'function': 'test_create_mc_question_with_null_answer', 'type': 'test', 'language': 'php'}, {'file': 'QuestionsTest.php', 'function': 'test_create_open_question', 'type': 'test', 'language': 'php'}, {'file': 'QuestionsTest.php', 'function': 'test_get_questions_on_empty_database', 'type': 'test', 'language': 'php'}, {'file': 'QuestionsTest.php', 'function': 'test_get_questions_on_populated_database', 'type': 'test', 'language': 'php'}, {'file': 'QuestionsTest.php', 'function': 'test_get_active_questions_on_populated_database', 'type': 'test', 'language': 'php'}, {'file': 'QuestionsTest.php', 'function': 'test_get_inactive_questions_on_populated_database', 'type': 'test', 'language': 'php'}, {'file': 'QuestionsTest.php', 'function': 'test_patch_question_invalid_request', 'type': 'test', 'language': 'php'}, {'file': 'QuestionsTest.php', 'function': 'test_patch_question_valid_request', 'type': 'test', 'language': 'php'}, {'file': 'QuestionsTest.php', 'function': 'test_create_open_question_with_insufficient_authorization', 'type': 'test', 'language': 'php'}, {'file': 'QuestionsTest.php', 'function': 'test_patch_question_with_insufficient_authorization', 'type': 'test', 'language': 'php'}, {'file': 'CreatesApplication.php', 'function': 'createApplication', 'type': 'function', 'language': 'php'}, {'file': 'FileTest.php', 'function': 'test_upload_with_no_file', 'type': 'test', 'language': 'php'}, {'file': 'FileTest.php', 'function': 'test_upload_with_csv_file', 'type': 'test', 'language': 'php'}, {'file': 'FileTest.php', 'function': 'test_upload_with_image_no_report_id', 'type': 'test', 'language': 'php'}, {'file': 'FileTest.php', 'function': 'test_upload_with_image_and_invalid_report_id', 'type': 'test', 'language': 'php'}, {'file': 'FileTest.php', 'function': 'test_upload_with_image_and_valid_report_id', 'type': 'test', 'language': 'php'}, {'file': 'FileTest.php', 'function': 'test_download_invalid_file_name', 'type': 'test', 'language': 'php'}, {'file': 'FileTest.php', 'function': 'test_download_valid_file_name', 'type': 'test', 'language': 'php'}, {'file': 'FileTest.php', 'function': 'test_download_with_invalid_authentication', 'type': 'test', 'language': 'php'}, {'file': 'ExampleTest.php', 'function': 'test_that_true_is_true', 'type': 'test', 'language': 'php'}]

    Best similarity matches for each requirement:
    [['US0-S0', [['test_that_true_is_true', 0.2687108516693115], ['test_create_open_question', 0.1781601458787918], ['test_create_mc_question_with_null_answer', 0.1645696759223938]]], ['US1-M1', [['test_get_reports_with_insufficient_authorization', 0.34225839376449585], ['test_get_report_with_insufficient_authorization', 0.3060135245323181], ['test_get_report', 0.2733696699142456]]], ['US2-M1', [['test_get_questions_on_empty_database', 0.46783286333084106], ['test_create_open_question', 0.42514708638191223], ['test_get_active_questions_on_populated_database', 0.42044293880462646]]], ['US2-M2', [['test_create_mc_question', 0.3398602604866028], ['test_create_mc_question_with_null_answer', 0.33542364835739136], ['test_create_open_question', 0.3329619765281677]]], ['US7-M1', [['test_create_report_with_responses', 0.32898789644241333], ['test_create_mc_question_with_null_answer', 0.31895339488983154], ['test_create_mc_question', 0.3092482388019562]]], ['US7-S2', [['test_create_report_with_responses', 0.3624380826950073], ['test_get_report_with_responses', 0.348691463470459], ['test_patch_report_valid_request', 0.3435514271259308]]], ['US7-S3', [['test_patch_report_valid_request', 0.3718660771846771], ['test_get_report_with_responses', 0.3183984160423279], ['test_get_reports_on_populated_database', 0.3149526119232178]]], ['US8-S1', [['test_get_report_with_responses', 0.27276158332824707], ['test_create_report_invalid_payload', 0.23215802013874054], ['test_get_report_invalid_id', 0.20876553654670715]]], ['US11-M1', [['createApplication', 0.4357001781463623], ['test_users_can_get_user_data', 0.32678043842315674], ['test_create_question_with_invalid_request', 0.3214294910430908]]], ['US11-M2', [['createApplication', 0.15421026945114136], ['test_users_can_logout', 0.052762433886528015], ['test_users_can_get_user_data', 0.052015651017427444]]], ['US11-M3', [['test_users_can_get_user_data', 0.3036227524280548], ['test_create_answer_with_valid_playload', 0.28626394271850586], ['test_create_answer_with_invalid_payload', 0.2780052423477173]]], ['US11-S4', [['test_create_question_with_invalid_request', 0.17852650582790375], ['test_create_open_question', 0.14972779154777527], ['test_download_valid_file_name', 0.12129868566989899]]], ['US11-S5', [['createApplication', 0.18535682559013367], ['test_patch_report_with_insufficient_authorization', 0.12580670416355133], ['test_upload_with_no_file', 0.10018844902515411]]], ['US12-M1', [['createApplication', 0.28777259588241577], ['test_create_question_with_invalid_request', 0.06670372933149338], ['test_create_mc_question_with_null_answer', 0.06370681524276733]]], ['US13-M1', [['test_that_true_is_true', 0.1892058253288269], ['test_create_answer_with_valid_playload', 0.15229973196983337], ['test_upload_with_csv_file', 0.129628986120224]]], ['US13-M2', [['createApplication', 0.2811545133590698], ['test_that_true_is_true', 0.07005950063467026], ['test_get_questions_on_empty_database', 0.05396641045808792]]]]

    ---

    ## Answer
    
    """}
  ]
)

print(completion.choices[0].message.content)